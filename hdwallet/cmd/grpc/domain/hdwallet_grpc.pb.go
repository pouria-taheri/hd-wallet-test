// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: hdwallet.proto

package hdwallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HdWalletClient is the client API for HdWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdWalletClient interface {
	Command(ctx context.Context, opts ...grpc.CallOption) (HdWallet_CommandClient, error)
}

type hdWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewHdWalletClient(cc grpc.ClientConnInterface) HdWalletClient {
	return &hdWalletClient{cc}
}

func (c *hdWalletClient) Command(ctx context.Context, opts ...grpc.CallOption) (HdWallet_CommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &HdWallet_ServiceDesc.Streams[0], "/rpc.HdWallet/Command", opts...)
	if err != nil {
		return nil, err
	}
	x := &hdWalletCommandClient{stream}
	return x, nil
}

type HdWallet_CommandClient interface {
	Send(*Body) error
	Recv() (*Body, error)
	grpc.ClientStream
}

type hdWalletCommandClient struct {
	grpc.ClientStream
}

func (x *hdWalletCommandClient) Send(m *Body) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hdWalletCommandClient) Recv() (*Body, error) {
	m := new(Body)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HdWalletServer is the server API for HdWallet service.
// All implementations must embed UnimplementedHdWalletServer
// for forward compatibility
type HdWalletServer interface {
	Command(HdWallet_CommandServer) error
	mustEmbedUnimplementedHdWalletServer()
}

// UnimplementedHdWalletServer must be embedded to have forward compatible implementations.
type UnimplementedHdWalletServer struct {
}

func (UnimplementedHdWalletServer) Command(HdWallet_CommandServer) error {
	return status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedHdWalletServer) mustEmbedUnimplementedHdWalletServer() {}

// UnsafeHdWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdWalletServer will
// result in compilation errors.
type UnsafeHdWalletServer interface {
	mustEmbedUnimplementedHdWalletServer()
}

func RegisterHdWalletServer(s grpc.ServiceRegistrar, srv HdWalletServer) {
	s.RegisterService(&HdWallet_ServiceDesc, srv)
}

func _HdWallet_Command_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HdWalletServer).Command(&hdWalletCommandServer{stream})
}

type HdWallet_CommandServer interface {
	Send(*Body) error
	Recv() (*Body, error)
	grpc.ServerStream
}

type hdWalletCommandServer struct {
	grpc.ServerStream
}

func (x *hdWalletCommandServer) Send(m *Body) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hdWalletCommandServer) Recv() (*Body, error) {
	m := new(Body)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HdWallet_ServiceDesc is the grpc.ServiceDesc for HdWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.HdWallet",
	HandlerType: (*HdWalletServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Command",
			Handler:       _HdWallet_Command_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hdwallet.proto",
}
